"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CI = require("ci-info");
var path = require("path");
var download_1 = require("../actions/download");
var files_1 = require("../actions/files");
var flow_control_1 = require("../actions/flow_control");
var logging_1 = require("../actions/logging");
var config_1 = require("../config");
var logger_1 = require("../logger");
exports.command = 'update';
exports.desc = 'Makes sure the Serenity BDD CLI jar file is available and up to date';
exports.builder = {
    cacheDir: {
        default: config_1.defaults.cacheDir,
        describe: 'An absolute or relative path to where the Serenity BDD CLI jar file should be stored',
    },
    ignoreSSL: {
        default: false,
        describe: 'Ignore SSL certificates',
    },
    repository: {
        default: config_1.defaults.repository,
        describe: 'Set the maven repository',
    },
    artifact: {
        default: config_1.defaults.artifact,
        describe: "Serenity BDD CLI artifact to use; You're best off with the default option unless you want to experiment.",
    },
    progress: {
        default: !CI.isCI,
        describe: 'Show the progress bar; Defaults to false on CI servers to avoid polluting the logs.',
    },
};
exports.handler = function (argv) {
    return logger_1.adjustLogging(argv.log)
        .then(files_1.ensureDirectoryIsPresent(path.resolve(process.cwd(), argv.cacheDir)))
        .catch(logging_1.complain('Couldn\'t create a cache directory. %s'))
        .then(downloadArtifactIfNeeded(argv.artifact, argv.repository, argv.ignoreSSL, argv.progress))
        .catch(logging_1.complain('%s'));
};
// --
var downloadArtifactIfNeeded = function (artifact, repository, ignoreSSL, showProgress) { return function (cacheDir) {
    var filename = files_1.filenameOf(artifact), pathToCached = path.resolve(cacheDir, filename);
    return files_1.checkIfFileMissing(pathToCached)
        .catch(logging_1.complain('Couldn\'t access the cache directory. %s'))
        .then(flow_control_1.conditionally(logging_1.inform('Looks like you need the latest Serenity BDD CLI jar. Let me download it for you...'), logging_1.inform('Serenity BDD CLI jar file is up to date :-)')))
        .then(flow_control_1.conditionally(function () { return download_1.download(artifact, cacheDir, ignoreSSL, showProgress, repository); }))
        .then(flow_control_1.conditionally(logging_1.inform('Downloaded to %s')))
        .catch(logging_1.advise('Looks like an error occurred downloading the Serenity BDD CLI jar. %s'));
}; };
//# sourceMappingURL=update.js.map