"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var logging_1 = require("../actions/logging");
var config_1 = require("../config");
var os = require("os");
var path = require("path");
var files_1 = require("../actions/files");
var process_1 = require("../actions/process");
var logger_1 = require("../logger");
var javaHome = require('java-home'); // tslint:disable-line:no-var-requires
var which = require('which'); // tslint:disable-line:no-var-requires
exports.command = 'run';
exports.desc = 'Aggregates the JSON reports generated by Serenity BDD and produces one in HTML';
exports.builder = {
    cacheDir: {
        default: config_1.defaults.cacheDir,
        describe: 'An absolute or relative path to where the Serenity BDD CLI jar file should be stored',
    },
    destination: {
        default: config_1.defaults.reportDir,
        describe: 'Directory to contain the generated Serenity BDD report',
    },
    features: {
        default: config_1.defaults.featuresDir,
        describe: 'Source directory containing the Cucumber.js feature files',
    },
    artifact: {
        default: config_1.defaults.artifact,
        describe: "Serenity BDD CLI artifact to use; You're best off with the default option unless you want to experiment.",
    },
    source: {
        default: config_1.defaults.sourceDir,
        describe: 'Source directory containing the Serenity BDD JSON output files',
    },
    issueTrackerUrl: {
        describe: 'Base URL for issue trackers other than JIRA',
    },
    jiraProject: {
        describe: 'JIRA project identifier',
    },
    jiraUrl: {
        describe: 'Base URL of your JIRA server',
    },
    project: {
        describe: 'Project name to appear in the Serenity reports (defaults to the project directory name)',
    },
};
exports.handler = function (argv) {
    return logger_1.adjustLogging(argv.log)
        .then(findJava)
        .then(logging_1.inform('Using Java at: %s'))
        .catch(logging_1.complain('Is Java set up correctly? %s'))
        .then(process_1.executeWith(flatten(['-jar', cliJarIn(argv.cacheDir, argv.artifact), argumentsFrom(argv)])))
        .catch(logging_1.complain('%s'))
        .then(logging_1.inform('All done!'));
};
// --
exports.javaFor = function (osName) { return (osName === 'Windows_NT') ? 'java.exe' : 'java'; };
var findJava = function () { return javaHome.getPath()
    .then(function (javaDir) { return files_1.ensureFileIsPresent(path.resolve(javaDir, 'bin', exports.javaFor(os.type()))); })
    .catch(function (error) { return which.sync('java'); })
    .catch(function (error) {
    throw new Error("\"" + exports.javaFor(os.type()) + "\" could not be found at JAVA_HOME or on the PATH");
}); };
var cliJarIn = function (cacheDir, artifact) { return path.resolve(cacheDir, files_1.filenameOf(artifact)); };
var argumentsFrom = function (argv) {
    var validArguments = [
        'destination',
        'features',
        'issueTrackerUrl',
        'jiraProject',
        'jiraUrl',
        'project',
        'source',
    ], onlyThoseThatArePresent = function (arg) { return !!argv[arg]; }, toCLIParams = function (arg) { return ["--" + arg, argv[arg]]; };
    return validArguments.filter(onlyThoseThatArePresent).map(toCLIParams);
};
var flatten = function (list) { return list.reduce(function (acc, current) {
    Array.isArray(current)
        ? acc.push.apply(acc, flatten(current)) : acc.push(current);
    return acc;
}, []); };
//# sourceMappingURL=run.js.map