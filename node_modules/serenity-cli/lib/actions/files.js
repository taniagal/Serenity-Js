"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants = require("constants");
var fs = require("fs");
var mkdirp = require("mkdirp");
var rimraf = require("rimraf");
var util_1 = require("util");
var mvn_artifact_filename_1 = require("mvn-artifact-filename");
var mvn_artifact_name_parser_1 = require("mvn-artifact-name-parser");
exports.ensureDirectoryIsPresent = function (destination) { return function () { return new Promise(function (resolve, reject) {
    mkdirp(destination, function (error) {
        if (!!error) {
            reject(error);
        }
        else {
            resolve(destination);
        }
    });
}); }; };
exports.ensureFileIsPresent = function (destination) { return new Promise(function (resolve, reject) {
    fs.access(destination, constants.F_OK | constants.X_OK, function (error) {
        if (!!error) {
            reject(new Error(util_1.format('Couldn\'t access "%s": %s', destination, error)));
        }
        else {
            resolve(destination);
        }
    });
}); };
exports.removeDirectory = function (destination) { return function () { return new Promise(function (resolve, reject) {
    rimraf(destination, function (error) {
        if (!!error) {
            reject(error);
        }
        else {
            resolve(destination);
        }
    });
}); }; };
exports.checkIfFileMissing = function (pathToFile) { return new Promise(function (resolve, reject) {
    fs.stat(pathToFile, function (error, stats) {
        if (!!error) {
            if (error.code === 'ENOENT') {
                resolve(true);
            }
            else {
                reject(error);
            }
        }
        resolve(stats && !stats.isFile());
    });
}); };
exports.filenameOf = function (artifact) { return mvn_artifact_filename_1.default(mvn_artifact_name_parser_1.default(artifact)); };
//# sourceMappingURL=files.js.map