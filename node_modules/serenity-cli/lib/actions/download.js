"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var ProgressBar = require("progress");
var request = require("request");
var mvn_artifact_filename_1 = require("mvn-artifact-filename");
var mvn_artifact_name_parser_1 = require("mvn-artifact-name-parser");
var mvn_artifact_url_1 = require("mvn-artifact-url");
function download(artifactName, destination, ignoreSSL, showProgressBar, repository) {
    if (destination === void 0) { destination = process.cwd(); }
    if (ignoreSSL === void 0) { ignoreSSL = false; }
    if (showProgressBar === void 0) { showProgressBar = true; }
    return new Promise(function (resolve, reject) {
        var artifact = mvn_artifact_name_parser_1.default(artifactName);
        var destFile = path.join(destination || process.cwd(), mvn_artifact_filename_1.default(artifact));
        mvn_artifact_url_1.default(artifact, repository).then(function (url) {
            var sent = request.get({
                url: url,
                strictSSL: !ignoreSSL,
            });
            sent.on('response', function (r) {
                if (r.statusCode === 200) {
                    if (showProgressBar) {
                        var total = parseInt(r.headers['content-length'], 10);
                        var bar_1 = new ProgressBar('downloading [:bar] :rate/bps :percent :etas', {
                            complete: '=',
                            incomplete: ' ',
                            width: 20,
                            total: total,
                        });
                        r.on('data', function (chunk) { return bar_1.tick(chunk.length); });
                    }
                    var file_1 = fs.createWriteStream(destFile);
                    file_1.on('finish', function () {
                        file_1.close();
                        resolve(destFile);
                    });
                    file_1.on('error', function (err) {
                        fs.unlink(destFile, function (unlinkErr) { return reject(unlinkErr); });
                        reject(err);
                    });
                    r.pipe(file_1);
                }
                else {
                    reject(r.statusCode);
                }
            });
            sent.on('error', function (e) {
                reject(e);
            });
        });
    });
}
exports.download = download;
//# sourceMappingURL=download.js.map