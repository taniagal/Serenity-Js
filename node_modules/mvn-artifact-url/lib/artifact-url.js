"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const mvn_artifact_filename_1 = require("mvn-artifact-filename");
const node_fetch_1 = require("node-fetch");
const parseXmlString_1 = require("./parseXmlString");
function groupPath(artifact) {
    return [
        artifact.groupId.replace(/\./g, '/'),
        artifact.artifactId,
        artifact.version + (artifact.isSnapShot ? '-SNAPSHOT' : ''),
    ].join('/');
}
function artifactPath(artifact) {
    return path.join(groupPath(artifact), mvn_artifact_filename_1.default(artifact));
}
function latestSnapShotVersion(artifact, basepath) {
    return __awaiter(this, void 0, void 0, function* () {
        const metadataUrl = basepath + groupPath(artifact) + '/maven-metadata.xml';
        const response = yield node_fetch_1.default(metadataUrl);
        if (response.status !== 200) {
            throw new Error(`Unable to fetch ${metadataUrl}. Status ${response.status}`);
        }
        const body = yield response.text();
        const xml = yield parseXmlString_1.default(body);
        const snapshot = xml.metadata.versioning[0].snapshot[0];
        const version = snapshot.timestamp[0] + '-' + snapshot.buildNumber[0];
        return version;
    });
}
function artifactUrl(artifact, basepath) {
    return __awaiter(this, void 0, void 0, function* () {
        const prefix = basepath || 'https://repo1.maven.org/maven2/';
        if (artifact.isSnapShot) {
            const snapShotVersion = yield latestSnapShotVersion(artifact, prefix);
            return prefix + artifactPath(Object.assign({}, artifact, { snapShotVersion }));
        }
        else {
            return prefix + artifactPath(artifact);
        }
    });
}
exports.default = artifactUrl;
//# sourceMappingURL=artifact-url.js.map