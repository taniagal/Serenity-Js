import { DomainEvent } from '../domain/events';
import { Stage } from './stage';
export interface StageCrewMember {
    assignTo(stage: Stage): any;
    notifyOf(event: DomainEvent<any>): void;
}
export declare class StageManager {
    private journal;
    private listeners;
    private wip;
    constructor(journal: Journal);
    notifyOf(event: DomainEvent<any>): void;
    informOfWorkInProgress<T>(promise: PromiseLike<T>): PromiseLike<T>;
    /**
     * Returns a promise that resolves when there's no more "work in progress",
     * so all the screenshots are saved, the browser is restarted and so on.
     */
    waitForNextCue: () => PromiseLike<any[]>;
    registerInterestIn(eventsOfInterest: Array<typeof DomainEvent>, crewMember: StageCrewMember): void;
    readTheJournal(): Array<DomainEvent<any>>;
    readNewJournalEntriesAs(readerId: string): Array<DomainEvent<any>>;
}
export declare class Journal {
    private events;
    private bookmarks;
    /**
     * Records an event and stores it in memory
     *
     * @param event
     */
    record(event: DomainEvent<any>): void;
    /**
     * Returns a list of all the events ever recorded
     *
     * @return {Event[]} a list of events
     */
    read(): Array<DomainEvent<any>>;
    /**
     * Returns a list of all the events recorded since you last checked
     *
     * @return {Event[]} a list of events
     */
    readAs(readerId: string): Array<DomainEvent<any>>;
}
