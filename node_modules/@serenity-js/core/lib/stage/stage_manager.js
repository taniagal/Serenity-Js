"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var events_1 = require("../domain/events");
var StageManager = (function () {
    function StageManager(journal) {
        var _this = this;
        this.journal = journal;
        this.listeners = [];
        this.wip = [];
        /**
         * Returns a promise that resolves when there's no more "work in progress",
         * so all the screenshots are saved, the browser is restarted and so on.
         */
        this.waitForNextCue = function () { return Promise.all(_this.wip); };
    }
    StageManager.prototype.notifyOf = function (event) {
        this.journal.record(event);
        if (this.listeners[event.constructor.name]) {
            this.listeners[event.constructor.name].notify(event);
        }
        // for the "catch-all" crew members
        if (this.listeners[events_1.DomainEvent.name]) {
            this.listeners[events_1.DomainEvent.name].notify(event);
        }
    };
    StageManager.prototype.informOfWorkInProgress = function (promise) {
        this.wip.push(promise);
        return promise;
    };
    StageManager.prototype.registerInterestIn = function (eventsOfInterest, crewMember) {
        var _this = this;
        eventsOfInterest.forEach(function (eventType) {
            if (!_this.listeners[eventType.name]) {
                _this.listeners[eventType.name] = new CrewMembersCommunicationChannel();
            }
            _this.listeners[eventType.name].register(crewMember);
        });
    };
    StageManager.prototype.readTheJournal = function () {
        return this.journal.read();
    };
    StageManager.prototype.readNewJournalEntriesAs = function (readerId) {
        return this.journal.readAs(readerId);
    };
    return StageManager;
}());
exports.StageManager = StageManager;
var Journal = (function () {
    function Journal() {
        this.events = [];
        this.bookmarks = {};
    }
    /**
     * Records an event and stores it in memory
     *
     * @param event
     */
    Journal.prototype.record = function (event) {
        this.events.push(event);
    };
    /**
     * Returns a list of all the events ever recorded
     *
     * @return {Event[]} a list of events
     */
    Journal.prototype.read = function () {
        return _.sortBy(_.cloneDeep(this.events), function (event) { return event.timestamp; });
    };
    /**
     * Returns a list of all the events recorded since you last checked
     *
     * @return {Event[]} a list of events
     */
    Journal.prototype.readAs = function (readerId) {
        var events = this.read(), bookmark = this.bookmarks[readerId] || 0;
        this.bookmarks[readerId] = events.length;
        return events.slice(bookmark);
    };
    return Journal;
}());
exports.Journal = Journal;
var CrewMembersCommunicationChannel = (function () {
    function CrewMembersCommunicationChannel() {
        this.listeners = [];
    }
    CrewMembersCommunicationChannel.prototype.register = function (listener) {
        this.listeners.push(listener);
    };
    CrewMembersCommunicationChannel.prototype.notify = function (event) {
        this.listeners.forEach(function (listener) { return listener.notifyOf(_.cloneDeep(event)); });
    };
    return CrewMembersCommunicationChannel;
}());
//# sourceMappingURL=stage_manager.js.map