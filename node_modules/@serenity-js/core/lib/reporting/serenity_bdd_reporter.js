"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var path = require("path");
var StackTrace = require("stacktrace-js");
var md5_1 = require("ts-md5/dist/md5");
var _1 = require("../");
var domain_1 = require("../domain");
var io_1 = require("../io");
var rehearsal_report_1 = require("./rehearsal_report");
function serenityBDDReporter(requirementsDirectory, outputDirectory) {
    if (requirementsDirectory === void 0) { requirementsDirectory = _1.serenity.config.requirementsDirectory; }
    if (outputDirectory === void 0) { outputDirectory = _1.serenity.config.outputDirectory; }
    return new SerenityBDDReporter(requirementsDirectory, new io_1.FileSystem(outputDirectory));
}
exports.serenityBDDReporter = serenityBDDReporter;
var SerenityBDDReporter = (function () {
    function SerenityBDDReporter(requirementsDirectory, fs) {
        this.requirementsDirectory = requirementsDirectory;
        this.fs = fs;
    }
    SerenityBDDReporter.prototype.assignTo = function (stage) {
        this.stage = stage;
        this.stage.manager.registerInterestIn(SerenityBDDReporter.Events_of_Interest, this);
    };
    SerenityBDDReporter.prototype.notifyOf = function (event) {
        switch (event.constructor) {
            case domain_1.SceneFinished: return this.persistReport();
        }
    };
    SerenityBDDReporter.prototype.persistReport = function () {
        var _this = this;
        this.stage.manager.informOfWorkInProgress(rehearsal_report_1.RehearsalReport.from(this.stage.manager.readNewJournalEntriesAs('SerenityBDDReporter'))
            .exportedUsing(new SerenityBDDReportExporter(this.requirementsDirectory))
            .then(function (fullReport) { return Promise.all(fullReport.scenes.map(function (scene) { return _this.fs.store(reportFileNameFor(scene), JSON.stringify(scene)); })); }));
    };
    return SerenityBDDReporter;
}());
SerenityBDDReporter.Events_of_Interest = [domain_1.SceneFinished];
exports.SerenityBDDReporter = SerenityBDDReporter;
function reportFileNameFor(scene) {
    var id = scene.id, tags = (scene.tags || []).map(function (t) { return t.type + ":" + t.name; }).join('-');
    return md5_1.Md5.hashStr(id + "-" + tags) + '.json';
}
// todo: extract
var Tags = (function () {
    function Tags() {
        var tags = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            tags[_i] = arguments[_i];
        }
        var _this = this;
        this.process = function () {
            var fns = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                fns[_i] = arguments[_i];
            }
            return fns.reduce(function (tags, fn) { return fn(tags); }, _this.tags);
        };
        this.tags = tags;
    }
    Tags.prototype.ofType = function (type) {
        return this.tags.filter(function (tag) { return tag.type === type; });
    };
    return Tags;
}());
var splitIssueTags = function (tags) {
    var isAnIssue = function (tag) { return !!~['issue', 'issues'].indexOf(tag.type); };
    var breakDownIssues = function (tag) { return isAnIssue(tag)
        ? tag.values.map(function (issueId) { return new domain_1.Tag('issue', [issueId]); })
        : tag; };
    return _.chain(tags)
        .map(breakDownIssues)
        .flatten()
        .value();
};
var addCapabilityAndFeatureTags = function (scene, pathToScenario) { return function (tags) {
    var nonEmpty = function () {
        var elements = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            elements[_i] = arguments[_i];
        }
        return elements.filter(function (e) { return !!e; });
    };
    var join = function () {
        var elements = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            elements[_i] = arguments[_i];
        }
        return nonEmpty.apply(void 0, elements).join('/');
    };
    var underscoresToSpaces = function (dirname) { return dirname.replace(/_+/g, ' '); };
    var capitaliseFirstLetter = function (text) { return text && text[0].toUpperCase() + text.slice(1); };
    var relativePath = path.dirname(pathToScenario);
    var subDirectories = (relativePath !== '.')
        ? relativePath.split(path.sep).map(underscoresToSpaces).map(capitaliseFirstLetter).reverse()
        : [];
    var feature = scene.category;
    var capability = subDirectories[0];
    var theme = subDirectories[1];
    return tags.concat(nonEmpty(new domain_1.Tag('feature', [join(capability, feature)]), capability && new domain_1.Tag('capability', [join(theme, capability)]), theme && new domain_1.Tag('theme', [theme])));
}; };
var tagAsManualIfNeeded = function (tags) { return tags.concat.apply(tags, tags.filter(function (tag) { return tag.type === 'manual'; }).map(function (t) { return new domain_1.Tag('External Tests', ['Manual']); })); };
var dashify = function (text) { return text
    .replace(/([a-z])([A-Z])/g, '$1-$2')
    .replace(/[ \t\W]/g, '-')
    .replace(/^-+|-+$/g, '')
    .toLowerCase(); };
// / todo: extract
/**
 * Transforms the tree structure of the RehearsalPeriod to a format acceptable by Protractor
 */
var SerenityBDDReportExporter = (function () {
    function SerenityBDDReportExporter(requirementsDirectory) {
        this.requirementsDirectory = requirementsDirectory;
        this.errorExporter = new ErrorExporter();
        this.photoExporter = new PhotoExporter();
        this.isAnIssue = function (tag) { return !!~['issue', 'issues'].indexOf(tag.type); };
    }
    SerenityBDDReportExporter.prototype.exportRehearsal = function (node) {
        var _this = this;
        return Promise.all(node.children.map(function (child) { return child.exportedUsing(_this); }))
            .then(function (children) { return ({
            scenes: children,
        }); });
    };
    SerenityBDDReportExporter.prototype.exportScene = function (node) {
        var _this = this;
        return Promise.all(node.children.map(function (child) { return child.exportedUsing(_this); }))
            .then(function (children) { return _this.errorExporter.tryToExport(node.outcome.error).then(function (error) {
            return node.promisedTags().then(function (promisedTags) {
                var scene = node.value, pathToScenario = path.relative(_this.requirementsDirectory, scene.location.path), tags = new (Tags.bind.apply(Tags, [void 0].concat(scene.tags, promisedTags)))(), allTags = tags.process(splitIssueTags, tagAsManualIfNeeded, addCapabilityAndFeatureTags(scene, pathToScenario));
                return ({
                    id: _this.idOf(node, allTags),
                    name: _this.idOf(node, allTags),
                    context: tags.ofType('context').map(function (tag) { return tag.value; }).pop(),
                    manual: !!tags.ofType('manual').pop(),
                    tags: _this.serialisedTags(allTags),
                    title: scene.name,
                    description: '',
                    startTime: node.startedAt,
                    duration: node.duration(),
                    testSource: 'cucumber',
                    userStory: {
                        id: dashify(scene.category),
                        path: pathToScenario,
                        storyName: scene.category,
                        type: 'feature',
                    },
                    issues: _this.issuesCoveredBy(scene),
                    testSteps: children,
                    result: domain_1.Result[node.outcome.result],
                    annotatedResult: domain_1.Result[node.outcome.result],
                    testFailureCause: error,
                });
            });
        }); });
    };
    SerenityBDDReportExporter.prototype.exportActivity = function (node) {
        var _this = this;
        return Promise.all(node.children.map(function (child) { return child.exportedUsing(_this); }))
            .then(function (children) { return Promise.all([node.photos(), _this.errorExporter.tryToExport(node.outcome.error)]).then(function (r) { return ({
            description: node.value.name,
            duration: node.duration(),
            startTime: node.startedAt,
            screenshots: _this.photoExporter.tryToExport(r[0]),
            result: domain_1.Result[node.outcome.result],
            children: children,
            exception: r[1],
        }); }); });
    };
    SerenityBDDReportExporter.prototype.idOf = function (node, tags) {
        var asString = function (t) { return !!t.value ? t.type + ":" + t.value : t.type; };
        var combined = function (ts) { return (tags || []).map(asString).join(';').replace(' ', ''); };
        return [
            node.value.name,
            combined(tags),
        ].map(dashify).join(';').replace(/;$/, '');
    };
    SerenityBDDReportExporter.prototype.issuesCoveredBy = function (scene) {
        var onlyIssueTags = this.isAnIssue, toIssueIds = function (tag) { return tag.values; };
        return _.chain(scene.tags).filter(onlyIssueTags).map(toIssueIds).flatten().uniq().value();
    };
    SerenityBDDReportExporter.prototype.serialisedTags = function (tags) {
        function serialise(tag) {
            var noValue = function (t) { return ({ name: t.type, type: 'tag' }); }, withValue = function (t) { return ({ name: t.values.join(','), type: t.type }); };
            return tag.values.length === 0
                ? noValue(tag)
                : withValue(tag);
        }
        return _.chain(tags)
            .map(serialise)
            .uniqBy('name')
            .value();
    };
    return SerenityBDDReportExporter;
}());
exports.SerenityBDDReportExporter = SerenityBDDReportExporter;
var PhotoExporter = (function () {
    function PhotoExporter() {
        this.ifNotEmpty = function (list) { return !!list.length ? list : undefined; };
    }
    PhotoExporter.prototype.tryToExport = function (photos) {
        return this.ifNotEmpty(photos.map(function (photo) { return ({ screenshot: path.basename(photo.path) }); }));
    };
    return PhotoExporter;
}());
var ErrorExporter = (function () {
    function ErrorExporter() {
    }
    ErrorExporter.prototype.tryToExport = function (error) {
        if (!error) {
            return Promise.resolve(undefined); // an undefined JSON field does not get serialised and that's what Serenity BDD expects
        }
        return this.stackTraceOf(error).then(function (frames) { return ({
            errorType: error.name,
            message: error.message,
            stackTrace: frames,
        }); });
    };
    ErrorExporter.prototype.stackTraceOf = function (error) {
        return !!error.stack ? this.parsedStackTraceOf(error) : Promise.resolve([]);
    };
    ErrorExporter.prototype.parsedStackTraceOf = function (error) {
        var serenityCode = /node_modules[\\/]serenity/, onlyIfFound = function (index) { return !!~index ? index : undefined; }, firstSerenityStackFrame = function (stack) { return onlyIfFound(stack.findIndex(function (frame) { return !!serenityCode.exec(frame.fileName); })); }, stack = StackTrace.fromError(error);
        return stack.then(function (frames) { return frames.slice(0, firstSerenityStackFrame(frames)).map(function (frame) {
            return {
                declaringClass: '',
                methodName: frame.functionName + "(" + (frame.args || []).join(', ') + ")",
                fileName: frame.fileName,
                lineNumber: frame.lineNumber,
            };
        }); });
    };
    return ErrorExporter;
}());
//# sourceMappingURL=serenity_bdd_reporter.js.map