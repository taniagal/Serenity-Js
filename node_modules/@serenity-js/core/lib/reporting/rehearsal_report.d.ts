import { DomainEvent, Outcome, Photo, RecordedActivity, RecordedScene, Tag } from '../domain';
import { ReportExporter } from './report_exporter';
export declare class RehearsalReport {
    static from(events: Array<DomainEvent<any>>): RehearsalPeriod;
}
export declare abstract class ReportPeriod<T> {
    parent: ReportPeriod<any>;
    value: T;
    children: Array<ReportPeriod<any>>;
    outcome: Outcome<T>;
    startedAt: number;
    protected finishedAt: number;
    private promisedPhotos;
    constructor(start: DomainEvent<T>);
    abstract matches(finished: T): boolean;
    concludeWith(finished: DomainEvent<Outcome<any>>): any;
    attach(promisedPhoto: PromiseLike<Photo>): void;
    photos(): PromiseLike<Photo[]>;
    duration(): number;
    append(child: ReportPeriod<RecordedScene | RecordedActivity>): ReportPeriod<RecordedScene | RecordedActivity>;
    abstract exportedUsing<FORMAT>(exporter: ReportExporter<FORMAT>): PromiseLike<FORMAT>;
}
export declare class RehearsalPeriod extends ReportPeriod<Rehearsal> {
    matches(finished: Rehearsal): boolean;
    exportedUsing<FORMAT>(exporter: ReportExporter<FORMAT>): PromiseLike<FORMAT>;
    constructor();
}
export declare class Rehearsal {
}
export declare class ActivityPeriod extends ReportPeriod<RecordedActivity> {
    matches(another: RecordedActivity): boolean;
    exportedUsing<FORMAT>(exporter: ReportExporter<FORMAT>): PromiseLike<FORMAT>;
}
export declare class ScenePeriod extends ReportPeriod<RecordedScene> {
    private tags;
    matches(another: RecordedScene): boolean;
    exportedUsing<FORMAT>(exporter: ReportExporter<FORMAT>): PromiseLike<FORMAT>;
    tagWithPromised(tag: PromiseLike<Tag>): void;
    promisedTags(): Promise<Tag[]>;
}
