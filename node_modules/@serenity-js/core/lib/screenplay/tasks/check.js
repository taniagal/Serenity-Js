"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var isBoolean = function (v) { return v === true || v === false; }, isQuestion = function (v) { return !!v.answeredBy; };
var Check = (function () {
    function Check() {
    }
    Check.whether = function (condition) {
        return ({
            andIfSo: function () {
                var activities = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    activities[_i] = arguments[_i];
                }
                if (isBoolean(condition)) {
                    return new ActivitiesConditionalOnBoolean(condition, activities, []);
                }
                if (isQuestion(condition)) {
                    return new ActivitiesConditionalOnQuestion(condition, activities, []);
                }
            },
        });
    };
    return Check;
}());
exports.Check = Check;
var ActivitiesConditionalOnBoolean = (function () {
    function ActivitiesConditionalOnBoolean(condition, activitiesWhenConditionIsMet, activitiesWhenConditionIsNotMet) {
        this.condition = condition;
        this.activitiesWhenConditionIsMet = activitiesWhenConditionIsMet;
        this.activitiesWhenConditionIsNotMet = activitiesWhenConditionIsNotMet;
    }
    ActivitiesConditionalOnBoolean.prototype.otherwise = function () {
        var activities = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            activities[_i] = arguments[_i];
        }
        return new ActivitiesConditionalOnBoolean(this.condition, this.activitiesWhenConditionIsMet, activities);
    };
    ActivitiesConditionalOnBoolean.prototype.performAs = function (actor) {
        return actor.attemptsTo.apply(actor, (this.condition
            ? this.activitiesWhenConditionIsMet
            : this.activitiesWhenConditionIsNotMet));
    };
    return ActivitiesConditionalOnBoolean;
}());
var ActivitiesConditionalOnQuestion = (function () {
    function ActivitiesConditionalOnQuestion(condition, activitiesWhenConditionIsMet, activitiesWhenConditionIsNotMet) {
        this.condition = condition;
        this.activitiesWhenConditionIsMet = activitiesWhenConditionIsMet;
        this.activitiesWhenConditionIsNotMet = activitiesWhenConditionIsNotMet;
    }
    ActivitiesConditionalOnQuestion.prototype.otherwise = function () {
        var activities = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            activities[_i] = arguments[_i];
        }
        return new ActivitiesConditionalOnQuestion(this.condition, this.activitiesWhenConditionIsMet, activities);
    };
    ActivitiesConditionalOnQuestion.prototype.performAs = function (actor) {
        var _this = this;
        var answer = this.condition.answeredBy(actor);
        if (isBoolean(answer)) {
            return actor.attemptsTo.apply(actor, (answer
                ? this.activitiesWhenConditionIsMet
                : this.activitiesWhenConditionIsNotMet));
        }
        return answer.then(function (result) { return actor.attemptsTo.apply(actor, (result
            ? _this.activitiesWhenConditionIsMet
            : _this.activitiesWhenConditionIsNotMet)); });
    };
    return ActivitiesConditionalOnQuestion;
}());
//# sourceMappingURL=check.js.map