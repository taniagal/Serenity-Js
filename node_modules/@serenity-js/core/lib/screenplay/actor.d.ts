import { StageManager } from '../stage/stage_manager';
import { Activity } from './activities';
import { Question } from './question';
export interface Ability {
}
export interface AbilityConstructor<A extends Ability> {
    new (...args: any[]): A;
    as(actor: UsesAbilities): A;
}
export interface PerformsTasks {
    attemptsTo(...tasks: Activity[]): Promise<void>;
}
export interface UsesAbilities {
    /**
     * Gives the Actor the Abilities to perform Actions
     *
     * @param abilities
     */
    whoCan(...abilities: Ability[]): UsesAbilities;
    /**
     * Grants access to the Actor's ability
     *
     * @param doSomething   Ability class name
     */
    abilityTo<T extends Ability>(doSomething: AbilityConstructor<T>): T;
}
export interface AnswersQuestions {
    toSee<T>(question: Question<T>): T;
}
export declare class Actor implements PerformsTasks, UsesAbilities, AnswersQuestions {
    private name;
    private tracker;
    private abilities;
    static named(name: string): Actor;
    whoCan(...abilities: Ability[]): Actor;
    abilityTo<T extends Ability>(doSomething: AbilityConstructor<T>): T;
    attemptsTo(...activities: Activity[]): Promise<void>;
    toSee<T>(question: Question<T>): T;
    toString(): string;
    constructor(name: string, stage_manager: StageManager);
    private can<T>(doSomething);
}
