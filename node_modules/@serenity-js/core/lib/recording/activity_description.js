"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var actor_1 = require("../screenplay/actor");
var isActor = function (candidate) { return candidate instanceof actor_1.Actor; };
var using = function (source) { return function (token, field) { return typeof source[field] === 'function'
    ? stringify(token, source[field].bind(source))
    : stringify(token, source[field]); }; };
var includeActorName = function (template, actor) { return template.replace('#actor', actor.toString()); };
var interpolateArguments = function (template, parameters) { return template.replace(/{(\d+)}/g, using(parameters)); };
var interpolateFields = function (template, activity) { return template.replace(/#(\w+)/g, using(activity)); };
function describeAs(template) {
    var parameters = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        parameters[_i - 1] = arguments[_i];
    }
    var first = parameters[0];
    switch (true) {
        case parameters.length > 1 || typeof first !== 'object':
            return interpolateArguments(template, parameters);
        case isActor(first):
            return includeActorName(interpolateArguments(template, parameters), first);
        default:
            return interpolateFields(template, first);
    }
}
exports.describeAs = describeAs;
function stringify(token, value) {
    switch ({}.toString.call(value)) {
        case '[object Function]': return stringify(token, value());
        case '[object Array]': return value.map(function (item) { return stringify(token, item); }).join(', ');
        case '[object Object]': return value.toString();
        case '[object Undefined]': return token;
        default: return value;
    }
}
//# sourceMappingURL=activity_description.js.map