"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@serenity-js/core");
var domain_1 = require("@serenity-js/core/lib/domain");
var file_system_1 = require("@serenity-js/core/lib/io/file_system");
var abilities_1 = require("../screenplay/abilities");
var photographer_timing_1 = require("./photographer-timing");
var md5_1 = require("ts-md5/dist/md5");
function photographer() {
    return Photographer.who(function (_) { return _; });
}
exports.photographer = photographer;
var ActivityOfInterest = (function () {
    function ActivityOfInterest(resultsOfInterest) {
        this.resultsOfInterest = resultsOfInterest;
    }
    ActivityOfInterest.prototype.isAResultOfInterest = function (result) {
        return !!(result & this.resultsOfInterest);
    };
    return ActivityOfInterest;
}());
exports.ActivityOfInterest = ActivityOfInterest;
var PhotographySchedule = (function () {
    function PhotographySchedule() {
        this.Failures = new ActivityOfInterest(domain_1.Result.Failed);
        this.Tasks_and_Interactions = new ActivityOfInterest(domain_1.Result.Finished);
        this.Activity_Starts_and_Finishes = new photographer_timing_1.TimingBehaviour(new photographer_timing_1.TakeAPhoto(), new photographer_timing_1.TakeAPhoto());
        this.Activity_Starts = new photographer_timing_1.TimingBehaviour(new photographer_timing_1.TakeAPhoto(), new photographer_timing_1.NoPhoto());
        this.Activity_Finishes = new photographer_timing_1.TimingBehaviour(new photographer_timing_1.NoPhoto(), new photographer_timing_1.TakeAPhoto());
        this.activityOfInterest = this.Tasks_and_Interactions;
        this.photoTiming = this.Activity_Finishes;
        this.pathToPhotos = core_1.serenity.config.outputDirectory;
        this.photoNamingStrategy = new Md5HashedPictureNames('png');
    }
    PhotographySchedule.prototype.takesPhotosOf = function (activityOfInterest) {
        this.activityOfInterest = activityOfInterest;
        return this;
    };
    PhotographySchedule.prototype.takesPhotosWhen = function (photoTiming) {
        this.photoTiming = photoTiming;
        return this;
    };
    PhotographySchedule.prototype.storesPhotosAt = function (pathToPhotos) {
        this.pathToPhotos = pathToPhotos;
        return this;
    };
    PhotographySchedule.prototype.build = function () {
        return new Photographer(this.activityOfInterest, this.photoTiming, new file_system_1.FileSystem(this.pathToPhotos), this.photoNamingStrategy);
    };
    return PhotographySchedule;
}());
exports.PhotographySchedule = PhotographySchedule;
var Photographer = (function () {
    function Photographer(fieldOfInterest, behaviour, fs, naming) {
        if (naming === void 0) { naming = new Md5HashedPictureNames('png'); }
        this.fieldOfInterest = fieldOfInterest;
        this.fs = fs;
        this.naming = naming;
        this.strategy = new PhotoTakingStrategy(fieldOfInterest, behaviour);
    }
    Photographer.who = function (scheduler) {
        return scheduler(new PhotographySchedule()).build();
    };
    Photographer.prototype.assignTo = function (stage) {
        this.stage = stage;
        this.stage.manager.registerInterestIn(Photographer.Events_of_Interest, this);
    };
    Photographer.prototype.notifyOf = function (event) {
        switch (event.constructor.name) {
            case domain_1.ActivityStarts.name:
                this.strategy.activityStarts(event, this);
                break;
            case domain_1.ActivityFinished.name:
                this.strategy.activityFinished(event, this);
                break;
            default: break;
        }
    };
    Photographer.prototype.canWork = function () {
        return !!this.stage && this.stage.theShowHasStarted();
    };
    Photographer.prototype.photograph = function (subject, timestamp) {
        var promisedPicture = this.photographWorkOf(this.stage.theActorInTheSpotlight());
        this.stage.manager.notifyOf(new domain_1.PhotoAttempted(new domain_1.PhotoReceipt(subject, promisedPicture), timestamp));
    };
    Photographer.prototype.photographWorkOf = function (actor) {
        var _this = this;
        var saveScreenshot = function (data) { return _this.fs.store(_this.naming.nameFor(data), new Buffer(data, 'base64')); };
        var ignoreBrowserNotAvailableForPhotosButReportAnyOther = function (error) {
            // todo: this needs further investigation; sometimes webdriver session dies before we can take a screenshot
            if (~error.message.indexOf('does not have a valid session ID') || ~error.message.indexOf('Session ID is null')) {
                // tslint:disable-next-line:no-console
                console.warn("[Photographer] Looks like there was a problem with taking a photo of " + actor + ": ", error.message);
                return undefined;
            }
            else if (/unexpected alert open/.test(error.message)) {
                // tslint:disable-next-line:no-console
                console.warn("[Photographer] skipping photo attempt for " + actor + " following : ", error.message);
                return undefined;
            }
            throw error;
        };
        return this.stage.manager.informOfWorkInProgress(abilities_1.BrowseTheWeb.as(actor).takeScreenshot()
            .then(saveScreenshot).then(function (path) { return new domain_1.Photo(path); }, function (error) { return ignoreBrowserNotAvailableForPhotosButReportAnyOther(error); }));
    };
    return Photographer;
}());
Photographer.Events_of_Interest = [domain_1.ActivityStarts, domain_1.ActivityFinished];
exports.Photographer = Photographer;
var Md5HashedPictureNames = (function () {
    function Md5HashedPictureNames(fileExtension) {
        if (fileExtension === void 0) { fileExtension = ''; }
        this.fileExtension = fileExtension;
    }
    Md5HashedPictureNames.prototype.nameFor = function (base64encodedData) {
        return md5_1.Md5.hashStr(base64encodedData) + this.extension();
    };
    Md5HashedPictureNames.prototype.extension = function () {
        return !!this.fileExtension ? '.' + this.fileExtension : '';
    };
    return Md5HashedPictureNames;
}());
exports.Md5HashedPictureNames = Md5HashedPictureNames;
var PhotoTakingStrategy = (function () {
    function PhotoTakingStrategy(interests, timing) {
        this.interests = interests;
        this.timing = timing;
    }
    PhotoTakingStrategy.prototype.activityStarts = function (event, photographer) {
        if (photographer.canWork()) {
            this.timing.takeABeforePhoto(event, photographer);
        }
    };
    PhotoTakingStrategy.prototype.activityFinished = function (event, photographer) {
        if (photographer.canWork() && this.interests.isAResultOfInterest(event.value.result)) {
            this.timing.takeAnAfterPhoto(event, photographer);
        }
    };
    return PhotoTakingStrategy;
}());
//# sourceMappingURL=photographer.js.map