"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var domain_1 = require("@serenity-js/core/lib/domain");
var reporting_1 = require("@serenity-js/core/lib/reporting");
var stage_1 = require("@serenity-js/core/lib/stage");
var ProtractorReporter = (function () {
    function ProtractorReporter(runner) {
        var _this = this;
        this.runner = runner;
        this.stage = null;
        this.journal = new stage_1.Journal();
        this.timing = {};
        this.record = function (event) { return _this.journal.record(event); };
    }
    ProtractorReporter.prototype.assignTo = function (stage) {
        this.stage = stage;
        this.stage.manager.registerInterestIn(ProtractorReporter.Events_of_Interest, this);
    };
    ProtractorReporter.prototype.notifyOf = function (event) {
        switch (event.constructor.name) {
            case domain_1.SceneStarts.name: return this.sceneStarts(event);
            case domain_1.ActivityStarts.name: return this.record(event);
            case domain_1.ActivityFinished.name: return this.record(event);
            case domain_1.SceneFinished.name: return this.sceneFinished(event);
        }
    };
    ProtractorReporter.prototype.finalResults = function () {
        return reporting_1.RehearsalReport.from(this.journal.read()).exportedUsing(new ProtractorReportExporter());
    };
    ProtractorReporter.prototype.sceneStarts = function (event) {
        this.record(event);
        this.timing[event.value.id] = event.timestamp;
    };
    ProtractorReporter.prototype.sceneFinished = function (event) {
        this.record(event);
        this.notifyProtractor(event.value, event.timestamp - this.timing[event.value.subject.id]);
    };
    ProtractorReporter.prototype.notifyProtractor = function (outcome, duration) {
        var result = (outcome.result & domain_1.Result.Failed)
            ? 'testFail'
            : 'testPass';
        this.runner.emit(result, {
            name: outcome.subject.name,
            category: outcome.subject.category,
            durationMillis: duration,
        });
    };
    return ProtractorReporter;
}());
ProtractorReporter.Events_of_Interest = [domain_1.SceneStarts, domain_1.SceneFinished];
exports.ProtractorReporter = ProtractorReporter;
/**
 * Transforms the tree structure of the RehearsalPeriod to a format acceptable by Protractor
 */
var ProtractorReportExporter = (function () {
    function ProtractorReportExporter(passing) {
        if (passing === void 0) { passing = function (r) { return !(r & domain_1.Result.Failed); }; }
        this.passing = passing;
    }
    ProtractorReportExporter.prototype.exportRehearsal = function (node) {
        var _this = this;
        return Promise.all(node.children.map(function (child) { return child.exportedUsing(_this); }))
            .then(function (children) { return ({
            failedCount: node.children.filter(function (period) { return !_this.passing(period.outcome.result); }).length,
            specResults: children,
        }); });
    };
    ProtractorReportExporter.prototype.exportScene = function (node) {
        var _this = this;
        return Promise.all(node.children.map(function (child) { return child.exportedUsing(_this); }))
            .then(function (children) { return ({
            description: node.value.name,
            assertions: children,
            duration: node.duration(),
        }); });
    };
    ProtractorReportExporter.prototype.exportActivity = function (node) {
        // we only export top-level activities as Protractor doesn't care about the nested ones
        return Promise.resolve({
            passed: this.passing(node.outcome.result),
            errorMsg: node.outcome.error && node.outcome.error.message,
            stackTrace: node.outcome.error && node.outcome.error.stack,
        });
    };
    return ProtractorReportExporter;
}());
exports.ProtractorReportExporter = ProtractorReportExporter;
//# sourceMappingURL=protractor_reporter.js.map