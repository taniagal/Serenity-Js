"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@serenity-js/core");
var config_1 = require("@serenity-js/core/lib/config");
var reporting_1 = require("@serenity-js/core/lib/reporting");
var protractor_1 = require("protractor");
var reporting_2 = require("../reporting");
var protractor_notifier_1 = require("../reporting/protractor_notifier");
var photographer_1 = require("../stage/photographer");
var stand_ins_1 = require("./stand_ins");
var test_framework_detector_1 = require("./test_framework_detector");
var protractor_browser_detector_1 = require("../reporting/protractor_browser_detector");
// spec: https://github.com/angular/protractor/blob/master/lib/frameworks/README.md
var noop = function () { return undefined; };
function run(runner, specs) {
    return new SerenityProtractorFramework(core_1.serenity, runner, protractor_1.protractor.browser).run(specs);
}
exports.run = run;
var SerenityProtractorFramework = (function () {
    function SerenityProtractorFramework(serenity, runner, browser) {
        var _this = this;
        this.serenity = serenity;
        this.runner = runner;
        this.onComplete = noop;
        this.detect = new test_framework_detector_1.TestFrameworkDetector();
        this.run = function (specs) { return _this.runner.runTestPreparer(_this.detect.supportedCLIParams()).
            then(function () { return _this.framework.run(specs).
            then(noop, _this.analyzeTheFailure).
            then(function () {
            return _this.waitForOthers().
                then(function () { return _this.reporter.finalResults(); });
        }, function (error) {
            console.error(error.message);
            return _this.waitForOthers().
                then(function () { return _this.reporter.finalResults(); }).
                then(function (results) { return (results.failedCount++, results); });
        }); }); };
        this.analyzeTheFailure = function (issue) { return new Promise(function (resolve, reject) {
            return issue instanceof Error
                ? reject(issue)
                : resolve(issue); // Cucumber returns "false" when the run fails and Mocha returns the number of failed tests.
            // Both those cases are handled by Protractor based on the final test results reported by Serenity/JS,
            // so we don't need any additional error handling here.
        }); };
        this.waitForOthers = function () { return Promise.all([
            _this.serenity.stageManager().waitForNextCue(),
            _this.waitForOtherProtractorPlugins(),
        ]); };
        this.waitForOtherProtractorPlugins = function () { return Promise.resolve(_this.onComplete); };
        // tslint:disable-next-line:no-string-literal that's how, by design, you access custom properties in Protractor
        this.withFallback = function (pc) { return new config_1.Config(pc['serenity']).withFallback({
            crew: [
                /// [default-stage-crew-members]
                reporting_1.serenityBDDReporter(),
                photographer_1.photographer(),
            ],
        }); };
        var protractorConfig = runner.getConfig();
        this.reporter = new reporting_2.ProtractorReporter(runner);
        this.framework = this.detect.frameworkFor(protractorConfig);
        this.onComplete = protractorConfig.onComplete || noop;
        this.serenity.configure(this.withFallback(protractorConfig).mergedWith({
            crew: [
                this.reporter,
                new protractor_browser_detector_1.ProtractorBrowserDetector(browser),
                new stand_ins_1.StandIns(),
                new protractor_notifier_1.ProtractorNotifier(runner),
            ],
        }).get);
    }
    return SerenityProtractorFramework;
}());
exports.SerenityProtractorFramework = SerenityProtractorFramework;
//# sourceMappingURL=serenity_protractor_framework.js.map