"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var domain_1 = require("@serenity-js/core/lib/domain");
var screenplay_1 = require("@serenity-js/core/lib/screenplay");
var protractor_1 = require("protractor");
var browse_the_web_1 = require("../screenplay/abilities/browse_the_web");
/**
 * Provides generic stand-in actors for the purpose of taking screenshots.
 * This is useful when integrating Serenity/JS with a legacy code base that does not (yet) use the Screenplay Pattern,
 * nor invoke `serenity.callToStageFor(customActors)`.
 */
var StandIns = (function () {
    function StandIns() {
    }
    StandIns.prototype.assignTo = function (stage) {
        this.stage = stage;
        this.stage.manager.registerInterestIn(StandIns.Events_of_Interest, this);
    };
    StandIns.prototype.notifyOf = function (event) {
        switch (event.constructor.name) {
            case domain_1.SceneStarts.name:
                this.provideStandInActorsIfNeeded();
                this.shineSpotlightOn('a stand-in actor');
        }
    };
    StandIns.prototype.provideStandInActorsIfNeeded = function () {
        if (!this.stage.actorsAreReady()) {
            this.stage.enter({
                actor: function (name) {
                    return screenplay_1.Actor.named(name).whoCan(browse_the_web_1.BrowseTheWeb.using(protractor_1.protractor.browser));
                },
            });
        }
    };
    StandIns.prototype.shineSpotlightOn = function (name) {
        this.stage.theActorCalled(name);
    };
    return StandIns;
}());
StandIns.Events_of_Interest = [domain_1.SceneStarts];
exports.StandIns = StandIns;
//# sourceMappingURL=stand_ins.js.map