"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var cucumber_test_framework_1 = require("../../serenity-cucumber/cucumber_test_framework");
var serenity_mocha_1 = require("../../serenity-mocha");
var TestFrameworkDetector = (function () {
    function TestFrameworkDetector() {
        this.supportedCLIParams = function () { return [
            'mochaOpts',
            'cucumberOpts',
        ]; };
        this.full = function (config, configSection) { return Object.assign({}, config[configSection], config.capabilities && config.capabilities[configSection]); };
    }
    TestFrameworkDetector.prototype.frameworkFor = function (config) {
        if (this.definesDialect(config)) {
            return this.tryToInstantiate(config.serenity.dialect.toLowerCase(), config);
        }
        if (this.defines('cucumberOpts', config)) {
            return this.tryToInstantiate('cucumber', config);
        }
        if (this.defines('mochaOpts', config)) {
            return this.tryToInstantiate('mocha', config);
        }
        throw new Error('Serenity/JS could not determine the test dialect you wish to use. ' +
            'Please add `serenity: { dialect: \'...\' }` to your Protractor configuration file ' +
            'and choose one of the following options: cucumber, mocha.');
    };
    TestFrameworkDetector.prototype.definesDialect = function (config) {
        return config.serenity && config.serenity.dialect;
    };
    TestFrameworkDetector.prototype.defines = function (property, config) {
        var empty = function (object) { return Object.getOwnPropertyNames(object).length === 0; };
        return !empty(this.full(config, property));
    };
    TestFrameworkDetector.prototype.tryToInstantiate = function (dialect, config) {
        switch (dialect) {
            case 'cucumber': return new cucumber_test_framework_1.CucumberTestFramework(config.configDir, this.full(config, 'cucumberOpts'));
            case 'mocha': return new serenity_mocha_1.MochaTestFramework(this.full(config, 'mochaOpts'));
            default: throw new Error("Serenity/JS does not (yet) support the '" + dialect + "' test framework. " +
                'Please let us know on github if you\'d like to see it added!');
        }
    };
    return TestFrameworkDetector;
}());
exports.TestFrameworkDetector = TestFrameworkDetector;
//# sourceMappingURL=test_framework_detector.js.map