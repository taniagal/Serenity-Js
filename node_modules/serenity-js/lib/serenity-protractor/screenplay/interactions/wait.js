"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var browse_the_web_1 = require("../abilities/browse_the_web");
var protractor_1 = require("protractor");
var Duration = (function () {
    function Duration(milliseconds) {
        var _this = this;
        this.milliseconds = milliseconds;
        this.toMillis = function () { return _this.milliseconds; };
        this.toString = function () { return _this.milliseconds + "ms"; };
    }
    return Duration;
}());
Duration.ofMillis = function (milliseconds) { return new Duration(milliseconds); };
Duration.ofSeconds = function (seconds) { return Duration.ofMillis(seconds * 1000); };
exports.Duration = Duration;
var Wait = (function () {
    function Wait() {
    }
    Wait.until = function (somethingToWaitFor, condition) {
        return new ActiveWait().until(somethingToWaitFor, condition);
    };
    return Wait;
}());
Wait.for = function (duration) { return new PassiveWait(duration); };
Wait.upTo = function (timeout) { return new ActiveWait(timeout); };
exports.Wait = Wait;
var ActiveWait = (function () {
    function ActiveWait(timeout) {
        if (timeout === void 0) { timeout = ActiveWait.Default_Timeout; }
        this.timeout = timeout;
    }
    ActiveWait.prototype.until = function (somethingToWaitFor, condition) {
        return condition(somethingToWaitFor, this.timeout);
    };
    return ActiveWait;
}());
ActiveWait.Default_Timeout = Duration.ofSeconds(5);
exports.ActiveWait = ActiveWait;
var Is = (function () {
    function Is() {
    }
    Is.aTargetThat = function (condition) {
        return function (target, timeout) { return new WaitUntil(target, condition, timeout); };
    };
    return Is;
}());
Is.visible = function () { return Is.aTargetThat(new IsVisible()); };
Is.invisible = function () { return Is.aTargetThat(new IsInvisible()); };
Is.present = function () { return Is.aTargetThat(new IsPresent()); };
Is.absent = function () { return Is.aTargetThat(new Absent()); };
Is.selected = function () { return Is.aTargetThat(new IsSelected()); };
Is.clickable = function () { return Is.aTargetThat(new IsClickable()); };
exports.Is = Is;
// package-protected
var PassiveWait = (function () {
    function PassiveWait(duration) {
        var _this = this;
        this.duration = duration;
        this.performAs = function (actor) { return browse_the_web_1.BrowseTheWeb.as(actor).sleep(_this.duration.toMillis()); };
    }
    return PassiveWait;
}());
var IsVisible = (function () {
    function IsVisible() {
        this.check = function (thing) { return protractor_1.protractor.ExpectedConditions.visibilityOf(thing); };
        this.name = function () { return 'visible'; };
    }
    return IsVisible;
}());
var IsInvisible = (function () {
    function IsInvisible() {
        this.check = function (thing) { return protractor_1.protractor.ExpectedConditions.invisibilityOf(thing); };
        this.name = function () { return 'invisible'; };
    }
    return IsInvisible;
}());
var IsPresent = (function () {
    function IsPresent() {
        this.check = function (thing) { return protractor_1.protractor.ExpectedConditions.presenceOf(thing); };
        this.name = function () { return 'present'; };
    }
    return IsPresent;
}());
var Absent = (function () {
    function Absent() {
        this.check = function (thing) { return protractor_1.protractor.ExpectedConditions.stalenessOf(thing); };
        this.name = function () { return 'absent'; };
    }
    return Absent;
}());
var IsSelected = (function () {
    function IsSelected() {
        this.check = function (thing) { return protractor_1.protractor.ExpectedConditions.elementToBeSelected(thing); };
        this.name = function () { return 'selected'; };
    }
    return IsSelected;
}());
var IsClickable = (function () {
    function IsClickable() {
        this.check = function (thing) { return protractor_1.protractor.ExpectedConditions.elementToBeClickable(thing); };
        this.name = function () { return 'clickable'; };
    }
    return IsClickable;
}());
var WaitUntil = (function () {
    function WaitUntil(target, condition, timeout) {
        this.target = target;
        this.condition = condition;
        this.timeout = timeout;
    }
    WaitUntil.prototype.performAs = function (actor) {
        return browse_the_web_1.BrowseTheWeb.as(actor).wait(this.condition.check(browse_the_web_1.BrowseTheWeb.as(actor).locate(this.target)), this.timeout.toMillis(), this.uppercased(this.target) + " did not become " + this.condition.name() + " within " + this.timeout);
    };
    WaitUntil.prototype.uppercased = function (target) {
        var name = target.toString();
        return name[0].toUpperCase() + name.slice(1);
    };
    return WaitUntil;
}());
/*
 [x] visibilityOf(elementFinder: ElementFinder): Function {
 [x] invisibilityOf(elementFinder: ElementFinder): Function {
 [x] presenceOf(elementFinder: ElementFinder): Function {
 [x] stalenessOf(elementFinder: ElementFinder): Function {
 [x] elementToBeSelected(elementFinder: ElementFinder): Function {
 [x] elementToBeClickable(elementFinder: ElementFinder): Function {

 [ ] alertIsPresent(): Function {
 [ ] textToBePresentInElement(elementFinder: ElementFinder, text: string): Function {
 [ ] textToBePresentInElementValue(elementFinder: ElementFinder, text: string): Function {
 [ ] titleContains(title: string): Function {
 [ ] titleIs(title: string): Function {
 [ ] urlContains(url: string): Function {
 [ ] urlIs(url: string): Function {
 */
//# sourceMappingURL=wait.js.map