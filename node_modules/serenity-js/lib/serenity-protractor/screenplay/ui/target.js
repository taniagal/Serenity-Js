"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var recording_1 = require("@serenity-js/core/lib/recording");
var Target = (function () {
    function Target(name, locator) {
        this.name = name;
        this.locator = locator;
    }
    Target.prototype.of = function () {
        var tokenReplacements = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            tokenReplacements[_i] = arguments[_i];
        }
        return new Target(recording_1.describeAs.apply(void 0, [this.name].concat(tokenReplacements)), new Interpolated(this.locator).with(tokenReplacements));
    };
    Target.prototype.called = function (newName) {
        return new Target(newName, this.locator);
    };
    Target.prototype.resolveUsing = function (resolver) {
        return resolver(this.locator);
    };
    Target.prototype.resolveAllUsing = function (resolver) {
        return resolver.all(this.locator);
    };
    Target.prototype.toString = function () {
        return "the " + this.name;
    };
    return Target;
}());
Target.the = function (name) { return ({
    located: function (byLocator) { return new Target(name, byLocator); },
}); };
exports.Target = Target;
var Interpolated = (function () {
    function Interpolated(locator) {
        var _this = this;
        this.locator = locator;
        this.canBeInterpolated = function () { return !!_this.locator.value; };
    }
    Interpolated.prototype.with = function (tokenReplacements) {
        var unescaped = function (template) { return template.replace(/\\{(\d+)\\}/, '{$1}'); };
        var asString = function (locator) { return unescaped("" + locator.value); };
        // note: ProtractorBy is not compatible with WebdriverBy https://github.com/angular/protractor/issues/3508
        if (!this.canBeInterpolated()) {
            throw new Error(this.locator.toString() +
                ' is not a webdriver-compatible locator so you won\'t be able to use token replacement with it');
        }
        var cloned = Object.assign({}, this.locator);
        cloned.__proto__ = Object.getPrototypeOf(this.locator);
        cloned.value = recording_1.describeAs.apply(void 0, [asString(this.locator)].concat(tokenReplacements));
        return cloned;
    };
    return Interpolated;
}());
//# sourceMappingURL=target.js.map