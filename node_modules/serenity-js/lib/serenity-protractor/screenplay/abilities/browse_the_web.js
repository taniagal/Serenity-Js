"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var async_1 = require("@serenity-js/core/lib/recording/async");
var target_1 = require("../ui/target");
var BrowseTheWeb = (function () {
    function BrowseTheWeb(browser) {
        this.browser = browser;
    }
    /**
     *
     * Instantiates the Ability to BrowseTheWeb, allowing the Actor to interact with a Web UI
     *
     * @param browser
     * @return {BrowseTheWeb}
     */
    BrowseTheWeb.using = function (browser) {
        return new BrowseTheWeb(browser);
    };
    /**
     * Used to access the Actor's ability to BrowseTheWeb from within the Interaction classes, such as Click or Enter
     *
     * @param actor
     * @return {BrowseTheWeb}
     */
    BrowseTheWeb.as = function (actor) {
        return actor.abilityTo(BrowseTheWeb);
    };
    BrowseTheWeb.prototype.locate = function (target) {
        return target.resolveUsing(this.browser.element);
    };
    BrowseTheWeb.prototype.locateAll = function (target) {
        return target.resolveAllUsing(this.browser.element);
    };
    BrowseTheWeb.prototype.takeScreenshot = function () {
        var _this = this;
        return async_1.defer(function () { return _this.browser.takeScreenshot(); });
    };
    BrowseTheWeb.prototype.get = function (destination, timeout) {
        return this.browser.get(destination, timeout);
    };
    BrowseTheWeb.prototype.getTitle = function () {
        return this.browser.getTitle();
    };
    BrowseTheWeb.prototype.getCurrentUrl = function () {
        return this.browser.getCurrentUrl();
    };
    BrowseTheWeb.prototype.actions = function () {
        return this.browser.actions();
    };
    BrowseTheWeb.prototype.manage = function () {
        return this.browser.driver.manage();
    };
    BrowseTheWeb.prototype.switchToParentWindow = function () {
        if (!this.parentWindow) {
            throw new Error('This window does not have a parent');
        }
        return this.browser.switchTo().window(this.parentWindow);
    };
    BrowseTheWeb.prototype.acceptAlert = function () {
        return this.browser.switchTo().alert().accept();
    };
    BrowseTheWeb.prototype.dismissAlert = function () {
        return this.browser.switchTo().alert().dismiss();
    };
    BrowseTheWeb.prototype.switchToWindow = function (handle) {
        var _this = this;
        return this.browser.getWindowHandle().then(function (currentWindow) {
            _this.parentWindow = currentWindow;
            return _this.browser.getAllWindowHandles().then(function (handles) {
                return _this.browser.switchTo().window(handle(handles));
            });
        });
    };
    BrowseTheWeb.prototype.sleep = function (millis) {
        var _this = this;
        return async_1.defer(function () { return _this.browser.sleep(millis); });
    };
    BrowseTheWeb.prototype.wait = function (condition, timeout, message) {
        return this.browser.wait(condition, timeout, message);
    };
    BrowseTheWeb.prototype.enableAngularSynchronisation = function (enable) {
        return this.browser.waitForAngularEnabled(enable);
    };
    BrowseTheWeb.prototype.executeScript = function (script) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return (_a = this.browser).executeScript.apply(_a, [script].concat(args.map(function (arg) { return _this.resolveTargets(arg); })));
        var _a;
    };
    BrowseTheWeb.prototype.executeAsyncScript = function (script) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return (_a = this.browser).executeAsyncScript.apply(_a, [script].concat(args.map(function (arg) { return _this.resolveTargets(arg); })));
        var _a;
    };
    BrowseTheWeb.prototype.resolveTargets = function (maybeTarget) {
        return maybeTarget instanceof target_1.Target
            ? maybeTarget.resolveUsing(this.browser.element)
            : maybeTarget;
    };
    return BrowseTheWeb;
}());
exports.BrowseTheWeb = BrowseTheWeb;
//# sourceMappingURL=browse_the_web.js.map