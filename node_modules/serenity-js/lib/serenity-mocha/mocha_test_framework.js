"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@serenity-js/core");
var io_1 = require("@serenity-js/core/lib/io");
var controlflow_1 = require("./controlflow");
var model_1 = require("./model");
var glob = require("glob");
var MochaTestFramework = (function () {
    function MochaTestFramework(config) {
        this.config = config;
        // waits with starting a new scenario until the stage cue
        // see https://github.com/angular/protractor/issues/4087
        this.stageCue = function () { return glob.sync(__dirname + '/stage_cue.?s').pop(); };
        var Mocha = io_1.attemptToRequire('mocha');
        this.mocha = new Mocha(config);
        this.registerCompilerIfNeeded(config.compiler);
        this.mocha.suite.on('pre-require', function () {
            var g = global;
            g.after = controlflow_1.wrapped(g.after);
            g.afterEach = controlflow_1.wrapped(g.afterEach);
            g.before = controlflow_1.wrapped(g.before);
            g.beforeEach = controlflow_1.wrapped(g.beforeEach);
            g.it = controlflow_1.wrapped(g.it);
            g.it.only = controlflow_1.wrapped(g.iit);
            g.it.skip = controlflow_1.wrapped(g.xit);
        });
        this.mocha.loadFiles();
    }
    MochaTestFramework.prototype.run = function (specs) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            specs.forEach(function (file) { return _this.mocha.addFile(file); });
            _this.mocha.addFile(_this.stageCue());
            var mochaRunner = _this.mocha.run(function (numberOfFailures) {
                if (numberOfFailures > 0) {
                    reject("Tests failed: " + numberOfFailures);
                }
                else {
                    resolve();
                }
            });
            mochaRunner.on('test', function (scenario) {
                core_1.serenity.notify(model_1.startOf(scenario));
            });
            mochaRunner.on('test end', function (scenario) {
                if (model_1.isPending(scenario)) {
                    core_1.serenity.notify(model_1.startOf(scenario));
                }
                core_1.serenity.notify(model_1.endOf(scenario));
            });
        });
    };
    MochaTestFramework.prototype.registerCompilerIfNeeded = function (compiler) {
        if (!!compiler && !!~compiler.indexOf(':')) {
            var _a = compiler.split(':'), module_1 = _a[1];
            io_1.attemptToRequire(module_1);
        }
    };
    return MochaTestFramework;
}());
exports.MochaTestFramework = MochaTestFramework;
//# sourceMappingURL=mocha_test_framework.js.map