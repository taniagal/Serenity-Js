"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var domain_1 = require("@serenity-js/core/lib/domain");
exports.startOf = function (scenario) { return new domain_1.SceneStarts(new MochaScene(scenario)); };
exports.endOf = function (scenario) { return new domain_1.SceneFinished(new domain_1.Outcome(new MochaScene(scenario), finalStateOf(scenario), scenario.err)); };
exports.isPending = function (scenario) { return finalStateOf(scenario) === domain_1.Result.PENDING; };
var MochaScene = (function (_super) {
    __extends(MochaScene, _super);
    function MochaScene(scenario) {
        return _super.call(this, nameOf(scenario), categoryOf(scenario), { path: scenario.file }, [], scenario.fullTitle()) || this;
    }
    return MochaScene;
}(domain_1.RecordedScene));
function finalStateOf(scenario) {
    if (scenario.pending) {
        return domain_1.Result.PENDING;
    }
    if (scenario.state === 'passed') {
        return domain_1.Result.SUCCESS;
    }
    if (timedOut(scenario) || hasErrors(scenario)) {
        return domain_1.Result.ERROR;
    }
    if (scenario.state === 'failed') {
        return domain_1.Result.FAILURE;
    }
    return domain_1.Result.COMPROMISED;
}
function timedOut(scenario) {
    // Mocha sets the `timedOut` flag *after* notifying the reporter of a test failure, hence the regex check.
    return scenario.timedOut || (scenario.err && /^Timeout.*exceeded/.test(scenario.err.message));
}
function hasErrors(scenario) {
    return scenario.err && scenario.err.constructor && !/AssertionError/.test(scenario.err.constructor.name);
}
function fullNameOf(scenario) {
    return !!scenario.parent
        ? (fullNameOf(scenario.parent) + " " + scenario.title).trim()
        : scenario.title;
}
function nameOf(scenario) {
    return fullNameOf(scenario).substring(categoryOf(scenario).length).trim();
}
function categoryOf(scenario) {
    return !!scenario.parent && scenario.parent.title.trim() !== ''
        ? categoryOf(scenario.parent)
        : scenario.title;
}
//# sourceMappingURL=model.js.map