"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@serenity-js/core");
var domain_1 = require("@serenity-js/core/lib/domain");
var cucumber = require("cucumber");
function scenarioLifeCycleNotifier() {
    return Object.assign(cucumber.Listener(), {
        handleBeforeScenarioEvent: handleBeforeScenarioEvent,
        handleBeforeStepEvent: handleBeforeStepEvent,
        handleStepResultEvent: handleStepResultEvent,
        handleScenarioResultEvent: handleScenarioResultEvent,
    });
    // handleAfterStepEvent      (step: events.StepPayload, callback: () => void) => callback();
    // handleBeforeFeaturesEvent (features: events.FeaturesPayload, callback: () => void) => callback();
    // handleBeforeFeatureEvent  (feature: events.FeaturePayload, callback: () => void) => callback();
    // handleAfterScenarioEvent  (scenario: events.ScenarioPayload, callback: () => void) => callback();
    // handleAfterFeatureEvent   (feature: events.FeaturePayload, callback: () => void) => callback();
    // handleFeaturesResultEvent (featuresResult: events.FeaturesResultPayload, callback: () => void) => callback();
    // handleAfterFeaturesEvent  (features: events.FeaturesPayload, callback: () => void) => callback();
}
exports.scenarioLifeCycleNotifier = scenarioLifeCycleNotifier;
function handleBeforeScenarioEvent(scenario, callback) {
    core_1.serenity.notify(new domain_1.SceneStarts(sceneFrom(scenario)));
    callback();
}
function handleBeforeStepEvent(step, callback) {
    if (!step.isHidden()) {
        core_1.serenity.notify(new domain_1.ActivityStarts(activityFrom(step)));
    }
    callback();
}
function handleStepResultEvent(result, callback) {
    var step = result.getStep();
    // "before" and "after" steps emit an event even if they keywords themselves are not present in the test...
    if (!step.isHidden()) {
        core_1.serenity.notify(new domain_1.ActivityFinished(outcome(activityFrom(step), result.getStatus(), result.getFailureException())));
    }
    callback();
}
function handleScenarioResultEvent(result, callback) {
    var scenario = result.getScenario();
    core_1.serenity.notify(new domain_1.SceneFinished(outcome(sceneFrom(scenario), result.getStatus(), result.getFailureException())));
    callback();
}
// --
function fullNameOf(step) {
    var serialise = function (argument) {
        // tslint:disable-next-line:switch-default  - the only possible values are DataTable and DocString
        switch (argument.getType()) {
            case 'DataTable':
                return '\n' + argument.raw().map(function (row) { return "| " + row.join(' | ') + " |"; }).join('\n');
            case 'DocString':
                return "\n" + argument.getContent();
        }
    };
    return [
        step.getKeyword(),
        step.getName(),
        step.getArguments().map(serialise).join('\n'),
    ].join('').trim();
}
function sceneFrom(scenario) {
    return new CucumberScene(scenario);
}
function activityFrom(step) {
    // todo: override RecordedTask::location
    return new domain_1.RecordedActivity(fullNameOf(step));
}
function outcome(subject, stepStatus, maybeError) {
    var error = errorFrom(maybeError);
    return new domain_1.Outcome(subject, serenityResultFrom(stepStatus, error), error);
}
function errorFrom(pseudoError) {
    switch (typeof pseudoError) {
        case 'string': return new Error(pseudoError);
        case 'object': return pseudoError;
        default: return undefined;
    }
}
function serenityResultFrom(stepStatus, error) {
    var timeOut = function (e) { return e && /timed out/.test(e.message); };
    var results = {
        undefined: domain_1.Result.PENDING,
        failed: domain_1.Result.FAILURE,
        pending: domain_1.Result.PENDING,
        passed: domain_1.Result.SUCCESS,
        skipped: domain_1.Result.SKIPPED,
    };
    if (!results[stepStatus]) {
        throw new Error("Couldn't map the '" + stepStatus + "' to a Serenity Result");
    }
    return timeOut(error)
        ? domain_1.Result.ERROR
        : results[stepStatus];
}
function toSerenityTag(cucumberTag) {
    return domain_1.Tag.from(cucumberTag.getName());
}
var CucumberScene = (function (_super) {
    __extends(CucumberScene, _super);
    function CucumberScene(scenario) {
        return _super.call(this, scenario.getName(), scenario.getFeature().getName(), {
            path: scenario.getUri(),
            line: scenario.getLine(),
        }, scenario.getTags().map(toSerenityTag), scenario.getFeature().getName() + ":" + scenario.getLine() + ":" + scenario.getName()) || this;
    }
    return CucumberScene;
}(domain_1.RecordedScene));
//# sourceMappingURL=cucumber_serenity_notifier.js.map